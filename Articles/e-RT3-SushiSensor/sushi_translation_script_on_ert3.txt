/* ***********************************************************************************************

YOKOGAWA        SushiToMQTT

Description:
This javascript converts a Yokogawa Sushi sensor message to induvidual messages that can be
send with MQTT. 
Before publishing messages to MQTT it requires a "Initialization information (INI)"-message to get
the sensor name. This name will be use in the topic of published MQTT messages.
The MQTT messages will exist of "SushiSensor/<sensorname>/<topic>"
The topics are:
    Z-Acceleration
    Z-Velocity
    Temperature
    XYZ-Acceleration
    XYZ-Velocity
    X-Acceleration
    X-Velocity
    Y-Acceleration
    Y-Velocity
    Uptime
    BatteryLeft
    RSSI
    PER
    SNR
    Longitude
    Latitude

The payload is an ascii string that represents the value.

Example:
Topic: SushiSensor/VTI1725/Temperature          Payload: 21.3

Version
0.1     Dec-2018    Inital version
0.2     Jun-2019    Changed input payload from UTF-8 to Bytes
0.4     Nov-2020    Added extra sushi sensors
        Jun-2021    Fixed issues and made improvements
                        Check before writing to file if the senser is known to prevent huge list in save file
                        (Added support for device type)


*********************************************************************************************** */

var MqttMsgs = [];
var SUSHI_SENSOR =  "SUSHI_SENSOR";          // This is the first part of the mqtt topic

var SUSHI_PR_SENSOR = "SUSHI_PR_SENSOR";
var SUSHI_T_SENSOR = "SUSHI_T_SENSOR";
var SUSHI_V_SENSOR = "SUSHI_V_SENSOR";

var ZACC_TOPIC =    "Z_ACCELERATION";
var ZVEL_TOPIC =    "Z_VELOCITY";
var TEMP_TOPIC =     "TEMPERATURE";
var ZSTAT_TOPIC =      "Z_STATUS";
var XYZACC_TOPIC =  "XYZ_ACCELERATION";
var XYZVEL_TOPIC =  "XYZ_VELOCITY";
var XYZSTAT_TOPIC =    "XYZ_STATUS";
var XACC_TOPIC =    "X_ACCELERATION";
var XVEL_TOPIC =    "X_VELOCITY";
var XSTAT_TOPIC =      "X_STATUS";
var YACC_TOPIC =    "Y_ACCELERATION";
var YVEL_TOPIC =    "Y_VELOCITY";
var YSTAT_TOPIC =      "Y_STATUS";
var UPT_TOPIC =     "UPTIME";
var BAT_TOPIC =     "BATTERYLEFT";
var RSSI_TOPIC =    "RSSI";
var PER_TOPIC =     "PER";
var SNR_TOPIC =     "SNR";
var LONG_TOPIC =    "LONGITUDE";
var LAT_TOPIC =     "LATITUDE";
var DIAG_TOPIC =    "DIAG";
var DIAGDETAIL_TOPIC =    "DIAG_DETAIL";


var ALT_TOPIC =   "ALTITUDE";
var VENDORID_TOPIC = "VENDOR_ID";
var DEV_TYPE_TOPIC = "DEV_TYPE";
var DEV_REV_TOPIC =  "DEV_REV";
var PRESS_TOPIC =    "PRESSURE";
var PRESS_STAT_TOPIC = "PRESSURE_STATUS";
var TEMP_STAT_TOPIC = "TEMP_STATUS";

var TEMP1_TOPIC = "TEMPERATURE1";
var TEMP2_TOPIC = "TEMPERATURE2";
var TEMP1STAT_TOPIC = "TEMP1_STATUS";
var TEMP2STAT_TOPIC = "TEMP2_STATUS";

var dataType, sensorName, sensorID;
var action = "";
var PVAcceleration, PVVelocity, PVTemperature, PVPressure;
var uptime, batteryLeft, RSSI, PER, SNR;
var diagStatus, diagStatusDetail;
var debug = false;
var number;
var dateTime;
var fraction, exponent, sign, value, PVStatus, PVTemp1Status, PVTemperature1, PVTemp2Status, PVTemperature2, longitude, latitude, HPLongitude, HPLatitude, i, HPAltitude, vendorID, deviceType, deviceRev
var payloadPrefix = msg.payload.data

/* ***********************************************************************************************
CheckStatus (act, sensor, byte1, byte2)
act     - string that contains the current sushi sensor action, used for error message purposes
sensor  - string that contains the sensor name, used for error message purposes
byte1   - first byte of the status.
byte2   - second byte of the status.

Function that checks the status bytes.
The status bytes are part of the following sushi sensor messages:
    case 0x10: //Sushi Sensor vibration (Z-axis)
    case 0x11: //Sushi Sensor vibration (XYZ composite axes)
    case 0x12: //Sushi Sensor vibration (X-axis)
*********************************************************************************************** */

function CheckStatus(sensor, byte1, byte2)
{
  if (byte1 === 0 && byte2 === 0) return true;
  if (byte2 & 0x80) MqttMsgs.push({topic: SUSHI_SENSOR + "/" + sensor + "/DataStatusFault", payload:"Accelaretion Error, message: " + ", for sensor: " + sensor});
  if (byte2 & 0x40) MqttMsgs.push({topic: SUSHI_SENSOR + "/" + sensor + "/DataStatusFault", payload:"Velocity Error, message: " + ", for sensor: " + sensor});
  if (byte2 & 0x20) MqttMsgs.push({topic: SUSHI_SENSOR + "/" + sensor + "/DataStatusFault", payload:"Temperature Error, message: " + ", for sensor: " + sensor});
  if (byte2 & 0x10) MqttMsgs.push({topic: SUSHI_SENSOR + "/" + sensor + "/DataStatusFault", payload:"Accelaretion overrange, message: " + ", for sensor: " + sensor});
  if (byte2 & 0x08) MqttMsgs.push({topic: SUSHI_SENSOR + "/" + sensor + "/DataStatusFault", payload:"Velocity overrange, message: " + ", for sensor: " + sensor});
  if (byte2 & 0x04) MqttMsgs.push({topic: SUSHI_SENSOR + "/" + sensor + "/DataStatusFault", payload:"Temperature overrange, message: " + ", for sensor: " + sensor});
  if (byte2 & 0x02) MqttMsgs.push({topic: SUSHI_SENSOR + "/" + sensor + "/DataStatusFault", payload:"Reserved, message: " +  ", for sensor: " + sensor});
  if (byte2 & 0x01) MqttMsgs.push({topic: SUSHI_SENSOR + "/" + sensor + "/DataStatusFault", payload:"Simulation mode, message: " +  ", for sensor: " + sensor});

  return true;
}

/* ***********************************************************************************************
GetFloat16(byte1, byte2)

Function that compiles a float value out of a 2 byte float16.
*********************************************************************************************** */

function GetFloat16(byte1, byte2) 
{
  if(byte1 <0){
      byte1 = (byte1 & 0xFF) | 0x80;
  }else{
      byte1 = byte1 & 0xFF;
  }
  if(byte2 <0){
      byte2 = (byte2 & 0xFF) | 0x80;
  }else{
      byte2 = byte2 & 0xFF;
  } 
  // byte2 = byte2 & 0xFF;
  fraction = ((byte1 & 0x03) * 256) + byte2;
  exponent = (byte1 & 0x7C) >> 2;
  sign = byte1 >> 7;
  if (exponent !== 0)
  {
    value = Math.pow(2, exponent - 15) * (1 + fraction/1024);
  }
  else value = Math.pow(2, -14) * fraction/1024;

  if (sign) value = - value;
  
//  if(debug) node.error ("GetFloat16: value=" + value + ", byte1=" + byte1 + ", byte2=" + byte2 + ", fraction=" + fraction + ", exponent=" + exponent + ", sign=" + sign);
  if(debug) node.error ("GetFloat16: value=" + value + ", byte1=" + byte1 + ", byte2=" + byte2 + ", fraction=" + fraction + ", exponent=" + exponent + ", sign=" + sign);
  return value;
}


/* ***********************************************************************************************
GetFloat32(byte1, byte2, byte3, byte4)

Function that compiles a float value out of a 4 byte float32.
*********************************************************************************************** */

function GetFloat32(byte1, byte2, byte3, byte4) 
{
  fraction = ((byte2 & 0x7F) * 256 * 256) + byte3 * 256 + byte4;
  exponent = ((byte1 & 0x7F) << 1) + (byte2 >> 7);
  sign = byte1 >> 7;
  if (exponent !== 0)
  {
    value = Math.pow(2, exponent - 127) * (1 + fraction/0x7FFFFF);
  }
  else value = Math.pow(2, -126) * fraction/0x7FFFFF;

  if (sign) value = - value;
  
  if(debug) node.error ("GetFloat32: value=" + value + ", byte1=" + byte1 + ", byte2=" + byte2 + ", fraction=" + fraction + ", exponent=" + exponent + ", sign=" + sign);
  return value;
}

/* ***********************************************************************************************
GetFloat64(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8)

Function that compiles a float value out of a 8 byte float64.
*********************************************************************************************** */
function GetFloat64(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8) 
{
  fraction = ((byte2 & 0x0F) * 256 * 256 * 256 * 256 * 256 * 256) + (byte3 * 256 * 256 * 256 * 256 * 256) + 
	            (byte4 * 256 * 256 * 256 * 256) + (byte5 * 256 * 256 * 256) +
							(byte6 * 256 * 256) + (byte7 * 256) + (byte8);
  exponent = ((byte1 & 0x7F) << 4) + (byte2 >> 4);
  sign = byte1 >> 7;
  if (exponent !== 0)
  {
    value = Math.pow(2, exponent - 1023) * (1 + fraction/0xFFFFFFFFFFFFF);
  }
  else value = Math.pow(2, -1022) * fraction/0xFFFFFFFFFFFFF;

  if (sign) value = - value;
  
  if(debug) node.error ("GetFloat64: value=" + value + ", byte1=" + byte1 + ", byte2=" + byte2 + ", fraction=" + fraction + ", exponent=" + exponent + ", sign=" + sign);
  return value;
}

sensorID = payloadPrefix.eui;
sensorName = payloadPrefix.eui;
dataType = payloadPrefix.payload[0];
if(debug) node.error("Sushi Sensor - ID: " + sensorID + ", Name: " + sensorName + ", DataType: " + dataType);

if(sensorName !== undefined || dataType ===  0x42){
  switch(dataType){
    case 0x10: //Sushi Sensor vibration (Z-axis)
      if( CheckStatus (sensorName, payloadPrefix.payload[1], payloadPrefix.payload[2]))
      {
        PVAcceleration = GetFloat16(payloadPrefix.payload[3], payloadPrefix.payload[4]);
        PVVelocity = GetFloat16(payloadPrefix.payload[5], payloadPrefix.payload[6]);
        PVTemperature = GetFloat16(payloadPrefix.payload[7], payloadPrefix.payload[8]);
        PVStatus = (payloadPrefix.payload[1] * 256 + payloadPrefix.payload[2]);

        var zdata = [{
          zacc: PVAcceleration,
          zvel: PVVelocity,
          temp: PVTemperature,
          zstat: PVStatus,
        },
        {
          sensor_type: "vib",
          eui: sensorID,
        }];

        MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: zdata})

        if(debug) node.error("Sushi Sensor vibration (Z-axis): PVAcceleration=" + PVAcceleration + ", PVVelocity=" + PVVelocity + ", PVTemperature=" + PVTemperature);
      }
      break;

    case 0x11: //Sushi Sensor vibration (XYZ composite axes)
      if( CheckStatus (sensorName, payloadPrefix.payload[1], payloadPrefix.payload[2]))
      {
        PVAcceleration = GetFloat16(payloadPrefix.payload[3], payloadPrefix.payload[4]);
        PVVelocity = GetFloat16(payloadPrefix.payload[5], payloadPrefix.payload[6]);
        PVTemperature = GetFloat16(payloadPrefix.payload[7], payloadPrefix.payload[8]);
        PVStatus = (payloadPrefix.payload[1] * 256 + payloadPrefix.payload[2]);
        
        var xyzdata = [{
          xyzacc: PVAcceleration,
          xyzvel: PVVelocity,
          temp: PVTemperature,
          xyzstat: PVStatus
        },
        {
          sensor_type: "vib",
          eui: sensorID
        }];

        MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: xyzdata})

        if(debug) node.error("Sushi Sensor vibration (XYZ composite axes): PVAcceleration=" + PVAcceleration + ", PVVelocity=" + PVVelocity + ", PVTemperature=" + PVTemperature);
      }
      break;
      
    case 0x12: //Sushi Sensor vibration (X-axis)
      if( CheckStatus (sensorName, payloadPrefix.payload[1], payloadPrefix.payload[2]))
      {
        PVAcceleration = GetFloat16(payloadPrefix.payload[3], payloadPrefix.payload[4]);
        PVVelocity = GetFloat16(payloadPrefix.payload[5], payloadPrefix.payload[6]);
        PVStatus = (payloadPrefix.payload[1] * 256 + payloadPrefix.payload[2]);
        
        var xdata = [{
          xacc: PVAcceleration,
          xvel: PVVelocity,
          xstat: PVStatus
        },
        {
          sensor_type: "vib",
          eui: sensorID
        }];
        
        MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: xdata})

        if(debug) node.error("Sushi Sensor vibration (X-axis): PVAcceleration=" + PVAcceleration + ", PVVelocity=" + PVVelocity);
      }
      break;
      
    case 0x13: //Sushi Sensor vibration (Y-axis)
      if( CheckStatus (sensorName, payloadPrefix.payload[1], payloadPrefix.payload[2]))
      {
        PVAcceleration = GetFloat16(payloadPrefix.payload[3], payloadPrefix.payload[4]);
        PVVelocity = GetFloat16(payloadPrefix.payload[5], payloadPrefix.payload[6]);
        PVStatus = (payloadPrefix.payload[1] * 256 + payloadPrefix.payload[2]);

        var ydata = [{
          yacc: PVAcceleration,
          yvel: PVVelocity,
          ystat: PVStatus
        },
        {
          sensor_type: "vib",
          eui: sensorID
        }];

        MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: ydata})

        if(debug) node.error("Sushi Sensor vibration (Y-axis): PVAcceleration=" + PVAcceleration + ", PVVelocity=" + PVVelocity);
      }
      break;

    case 0x20: //Sushi Sensor Temperature1
      if( CheckStatus (sensorName, payloadPrefix.payload[1], payloadPrefix.payload[2]))
      {
        PVTemp1Status = (payloadPrefix.payload[1] * 256 + payloadPrefix.payload[2]); 
				PVTemperature1 = GetFloat32(payloadPrefix.payload[3], payloadPrefix.payload[4], payloadPrefix.payload[5], payloadPrefix.payload[6]);
				
        var temp1data = [{
          temp1stat: PVTemp1Status,
          temp1: PVTemperature1,
        },
        {
          sensor_type: "temp",
          eui: sensorID
        }];

        MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: temp1data})

        if(debug) node.error("Sushi Sensor Temperature1: PVTemperature = " + PVTemperature1);
      }
      break;

		    case 0x21: //Sushi Sensor Temperature2
      action = "Sushi Sensor Temperature";
      if( CheckStatus (sensorName, payloadPrefix.payload[1], payloadPrefix.payload[2]))
      {
        PVTemp2Status = (payloadPrefix.payload[1] * 256 + payloadPrefix.payload[2]); 
				PVTemperature2 = GetFloat32(payloadPrefix.payload[3], payloadPrefix.payload[4], payloadPrefix.payload[5], payloadPrefix.payload[6]);
        
        var temp2data = [{
          temp2stat: PVTemp2Status,
          temp2: PVTemperature2,
        },
        {
          sensor_type: "temp",
          eui: sensorID
        }];

        MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: temp2data})

        if(debug) node.error("Sushi Sensor Temperature: PVTemperature = " + PVTemperature2);
      }
      break;	

    case 0x30: //Sushi Sensor Pressure
      if( CheckStatus (sensorName, payloadPrefix.payload[1], payloadPrefix.payload[2]))
      {
        PVStatus = (payloadPrefix.payload[1] * 256 + payloadPrefix.payload[2]);
				PVPressure = GetFloat32(payloadPrefix.payload[3], payloadPrefix.payload[4], payloadPrefix.payload[5], payloadPrefix.payload[6]);
				
        var press_data = [{
          press_stat: PVStatus,
          press: PVPressure,
        },
        {
          sensor_type: "press",
          eui: sensorID
        }];

        MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: press_data})

        if(debug) node.error("Sushi Sensor Pressure: PVPressure = " + PVPressure);
      }
      break;

    case 0x31: //Sushi Sensor Temperature
      if( CheckStatus (sensorName, payloadPrefix.payload[1], payloadPrefix.payload[2]))
      {
        PVStatus = (payloadPrefix.payload[1] * 256 + payloadPrefix.payload[2]); 
				PVTemperature = GetFloat32(payloadPrefix.payload[3], payloadPrefix.payload[4], payloadPrefix.payload[5], payloadPrefix.payload[6]);
        
        var press_temp_data = [{
          press_temp_stat: PVStatus,
          press_temp: PVTemperature,
        },
        {
          sensor_type: "press",
          eui: sensorID
        }];

        MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: press_temp_data})

        if(debug) node.error("Sushi Sensor Temperature: PVTemperature = " + PVTemperature);
      }
      break;
      
    case 0x40: // Soundness information (HRI)
      uptime = (payloadPrefix.payload[1] * 256 * 256 + payloadPrefix.payload[2] *256 + payloadPrefix.payload[3])/1440;
      batteryLeft = payloadPrefix.payload[4]/2;
      RSSI = payloadPrefix.payload[5]*-1;
      PER = payloadPrefix.payload[6];
      SNR = (payloadPrefix.payload[7] & 0x7F) / 4;
        
        var soundless_data = [{
          upt: uptime,
          bat: batteryLeft,
          rssi: RSSI,
          per: PER,
          snr: SNR
        },
        {
          eui: sensorID,
          data_type: "meta_data"
        }];

        MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: soundless_data})

      if(debug) node.error("Soundness information (HRI): Uptime=" + uptime + " minutes, BatteryLeft=" + batteryLeft + " %, RSSI=" + RSSI + " dBm, PER=" + PER + " %, SNR=" + SNR + " dB");
      break;
      
    case 0x41: // Self-diagnosis information (DIAG)
      diagStatus =       payloadPrefix.payload[1] * 256 * 256 * 256 + payloadPrefix.payload[2] * 256 * 256 + payloadPrefix.payload[3] * 256 + payloadPrefix.payload[4];
      diagStatusDetail = payloadPrefix.payload[5] * 256 * 256 * 256 + payloadPrefix.payload[6] * 256 * 256 + payloadPrefix.payload[7] * 256 + payloadPrefix.payload[8];
      
      var diag_data = [{
        diag: diagStatus,
        diagdetail: diagStatusDetail,
      },
      {
        eui: sensorID,
        data_type: "meta_data"
      }];

      MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: diag_data})

      if(debug) node.error("Self-diagnosis information (DIAG): Diag_Status=" + diagStatus + ", Diag_Status_detail=" + diagStatusDetail);
      break;
      
    case 0x42: // Initialization information (INI)
      for (i = 1; i< payloadPrefix.payload.length ; i++)
      {
        if (payloadPrefix.payload[i] === 0) break;
      }
      sensorName = payloadPrefix.payload.slice(1, i); // should start at payload (1)
      //Check if we already know this sensor
      if (global.get(sensorID) == sensorName) {
          if(debug) node.error("Known sensor=" + sensorName + " " + global.get(sensorID));
          //MqttMsgs.push({topic: "SushiConfig", payload:sensorID + ";" +sensorName + ";" + "known sensor"});
      } else {
          if(debug) node.error("Unknown sensor=" + sensorName);
          global.set(sensorID, sensorName);
           dateTime = new Date();
           var dateTimeString = dateTime.getFullYear()+'-'+(dateTime.getMonth()+1)+'-'+dateTime.getDate()+ 
            '-'+dateTime.getHours() + ":" + dateTime.getMinutes() + ":" + dateTime.getSeconds();
           
          MqttMsgs.push({topic: "SushiConfig", payload:sensorID + ";" +sensorName + ";" + dateTime});
      }
      if(debug) node.error("Initialization information (INI): sensorname=" + sensorName + ", length=" + (i-1));
      break;

    case 0x43: // GPS informaption (GPS)
      longitude = GetFloat32(payloadPrefix.payload[1], payloadPrefix.payload[2], payloadPrefix.payload[3], payloadPrefix.payload[4]);
      latitude = GetFloat32(payloadPrefix.payload[5], payloadPrefix.payload[6], payloadPrefix.payload[7], payloadPrefix.payload[8]);
      
      var gps_data = [{
        long: longitude,
        lat: latitude,
      },
      {
        sensor_type: "vib",
        eui: sensorID,
        data_type: "meta_data"
      }];

      MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: gps_data})

      if(debug) node.error("GPS informaption (GPS): Longitude=" + longitude + ", Latitude=" + latitude );
      break;

    case 0x44: // High Precision GPS Longitude (HPGPS-LO)
    	HPLongitude = GetFloat64(payloadPrefix.payload[1], payloadPrefix.payload[2], payloadPrefix.payload[3], payloadPrefix.payload[4], 
			                         payloadPrefix.payload[5], payloadPrefix.payload[6], payloadPrefix.payload[7], payloadPrefix.payload[8]);
      
      var hp_gps_LO_data = [{
        hplong: HPLongitude
      },
      {
        eui: sensorID,
        data_type: "meta_data"
      }];

      MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: hp_gps_LO_data })

      if(debug) node.error("High Precision GPS informaption (HPGPS-LO): Longitude=" + HPLongitude);
      break;

    case 0x45: // High Precision GPS Latitude (HPGPS-LA)
			HPLatitude = GetFloat64(payloadPrefix.payload[1], payloadPrefix.payload[2], payloadPrefix.payload[3], payloadPrefix.payload[4], 
			                        payloadPrefix.payload[5], payloadPrefix.payload[6], payloadPrefix.payload[7], payloadPrefix.payload[8]);
      
      var hp_gps_LA_data = [{
        hplat: HPLatitude,
      },
      {
        eui: sensorID,
        data_type: "meta_data"
      }];

      MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: hp_gps_LA_data})

      if(debug) node.error("High Precision GPS informaption (HPGPS-LA): Latitude=" + HPLatitude);
      break;

    case 0x46: // High Precision GPS Altitude (HPGPS-AL)
			HPAltitude = GetFloat64(payloadPrefix.payload[1], payloadPrefix.payload[2], payloadPrefix.payload[3], payloadPrefix.payload[4], 
			                        payloadPrefix.payload[5], payloadPrefix.payload[6], payloadPrefix.payload[7], payloadPrefix.payload[8]);

      var hp_gps_AL_data = [{
        hplat: HPAltitude,
      },
      {
        eui: sensorID,
        data_type: "meta_data"
      }];

      MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: hp_gps_AL_data })

      if(debug) node.error("High Precision GPS informaption (HPGPS-LA): Altitude=" + HPAltitude);
      break;

    case 0x47: // Equipment Information
        // device type
        // Vibration sensor: Not supported?
        // Temperature sensor: 3
        // Pressure sensor: 5

		  vendorID = payloadPrefix.payload[1] * 256 * 256 * 256 + payloadPrefix.payload[2] * 256 * 256 + payloadPrefix.payload[3] * 256 + payloadPrefix.payload[4];
			deviceType = payloadPrefix.payload[5] * 256 + payloadPrefix.payload[6];
			deviceRev = payloadPrefix.payload[7] * 256 + payloadPrefix.payload[8];
			
      var equip_data = [{
        vendorid: vendorID,
        devtype: deviceType,
        devrev: deviceRev      },
      {
        eui: sensorID,
        data_type: "meta_data"
      }];

      MqttMsgs.push({ topic: SUSHI_SENSOR + "/" + sensorName, payload: equip_data})

      if(debug) node.error("Equipment information (HRI): VendorID = " + vendorID + " , Device Type =" + deviceType + " ,deviceRev=" + deviceRev);
			
  		break;
      
    default:
      if(debug) node.error("Unknown message");
      
  }
}
return [ MqttMsgs ];